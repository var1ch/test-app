{"version":3,"sources":["state/products/slice.ts","state/products/selectors.ts","view/StyledAppContainer.tsx","view/ProductsList/components/ProductItem.tsx","view/ProductsList/StyledProductsList.tsx","view/ProductsList/ProductsList.tsx","view/pages/ListPage/ListPage.tsx","view/pages/DetailsPage/DetailsPage.tsx","view/App.tsx","state/comments/slice.ts","state/store.ts","serviceWorker.ts","index.tsx","state/index.ts"],"names":["productsAdapter","createEntityAdapter","selectId","product","id","productsSlice","createSlice","name","initialState","getInitialState","reducers","addProductAction","state","action","addOne","payload","deleteProductAction","removeOne","setSelectedProduct","updateOne","changes","isSelected","actions","productsSelectors","getSelectors","products","selectedProductSelector","selectById","createSelector","selectAll","find","e","allProductsSelector","StyledAppContainer","styled","div","StyledProductItem","li","ProductItem","imgUrl","productName","productDescription","productCount","dispatch","useDispatch","className","src","alt","to","onClick","StyledProductsList","ul","ProductsList","props","arr","map","item","imageUrl","size","width","height","count","StyledListPage","ListPage","useSelector","useState","number","setNumber","fetch","then","res","json","prev","image","title","weight","StyledDetailsPage","DetailsPage","browserHistory","useHistory","backListener","listen","loc","selectedProduct","useEffect","App","exact","path","component","commentsAdapter","comment","commentsSlice","addCommentAction","deleteCommentAction","editCommentAction","description","text","rootReducer","combineReducers","comments","commentsReducer","productsReducer","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a3050d9b.chunk.js","sourcesContent":["import { createSlice, createEntityAdapter } from \"@reduxjs/toolkit\";\r\nimport type { PayloadAction } from \"@reduxjs/toolkit\";\r\nimport type { Product, ChangesPayload } from \"./types\";\r\n\r\nexport const productsAdapter = createEntityAdapter<Product>({\r\n  selectId: (product) => product.id,\r\n});\r\n\r\nconst productsSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState: productsAdapter.getInitialState(),\r\n  reducers: {\r\n    addProductAction: (state, action: PayloadAction<Product>) => {\r\n      productsAdapter.addOne(state, action.payload);\r\n    },\r\n    deleteProductAction: (state, action: PayloadAction<number>) => {\r\n      productsAdapter.removeOne(state, action.payload);\r\n    },\r\n    setSelectedProduct: (state, action: PayloadAction<ChangesPayload>) => {\r\n      productsAdapter.updateOne(state, {\r\n        id: action.payload.id,\r\n        changes: {\r\n          isSelected: action.payload.changes,\r\n        },\r\n      });\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addProductAction, deleteProductAction, setSelectedProduct } =\r\n  productsSlice.actions;\r\n\r\nexport default productsSlice.reducer;\r\n","import { createSelector } from \"reselect\";\r\nimport { productsAdapter } from \"./slice\";\r\nimport type { RootState } from \"../store\";\r\n\r\nconst productsSelectors = productsAdapter.getSelectors(\r\n  (state: RootState) => state.products,\r\n);\r\n\r\nexport const productByIdSelector = productsSelectors.selectById;\r\n\r\nexport const selectedProductSelector = createSelector(\r\n  productsSelectors.selectAll,\r\n  (products) => products.find((e) => e.isSelected === true),\r\n);\r\n\r\nexport const allProductsSelector = createSelector(\r\n  productsSelectors.selectAll,\r\n  (products) => products,\r\n);\r\n","import styled from \"styled-components\";\r\n\r\nconst StyledAppContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 720px;\r\n  margin: 0 auto;\r\n  button {\r\n    padding: 1em;\r\n  }\r\n`;\r\n\r\nexport default StyledAppContainer;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { deleteProductAction } from \"../../../state\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { setSelectedProduct } from \"../../../state\";\r\n\r\nconst StyledProductItem = styled.li`\r\n  margin-top: 25px;\r\n  background-color: white;\r\n  border-radius: 3px;\r\n  padding: 1em;\r\n  box-shadow: 1px 1px 8px 1px rgba(0, 0, 0, 0.25);\r\n  span.productName {\r\n    font-weight: bold;\r\n  }\r\n  img {\r\n    float: left;\r\n    margin-right: 16px;\r\n    width: 150px;\r\n  }\r\n  &:last-child {\r\n    margin-bottom: 25px;\r\n  }\r\n`;\r\n\r\ninterface Props {\r\n  id: number;\r\n  imgUrl: string;\r\n  productName: string;\r\n  productDescription: string;\r\n  productCount: string;\r\n}\r\n\r\nexport default function ProductItem({\r\n  id,\r\n  imgUrl,\r\n  productName,\r\n  productDescription,\r\n  productCount,\r\n}: Props) {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <StyledProductItem className=\"productItem\">\r\n      <div className=\"product\">\r\n        <img src={imgUrl} alt=\"product\" />\r\n        <span className=\"productName\">{productName}</span>\r\n        <br />\r\n        <p className=\"productDescription\">{productDescription}</p>\r\n        <span className=\"productCount\">{productCount}</span>\r\n      </div>\r\n      <Link\r\n        to={`/products/${id}`}\r\n        onClick={() => dispatch(setSelectedProduct({ id, changes: true }))}\r\n      >\r\n        Product Details\r\n      </Link>\r\n      <button>Edit</button>\r\n      <button onClick={() => dispatch(deleteProductAction(id))}>Delete</button>\r\n    </StyledProductItem>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledProductsList = styled.ul`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n","import React from \"react\";\r\nimport ProductItem from \"./components/ProductItem\";\r\nimport { StyledProductsList } from \"./StyledProductsList\";\r\n\r\nexport default function ProductsList(props: any) {\r\n  return (\r\n    <StyledProductsList>\r\n      {props.arr.map((item: any) => (\r\n        <ProductItem\r\n          id={item.id}\r\n          imgUrl={item.imageUrl}\r\n          productName={item.name}\r\n          productDescription={`Size: Width: ${item.size.width} Height: ${item.size.height}`}\r\n          productCount={`Count: ${item.count}`}\r\n        />\r\n      ))}\r\n    </StyledProductsList>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ProductsList from \"../../ProductsList/ProductsList\";\r\nimport { addProductAction } from \"../../../state\";\r\nimport styled from \"styled-components\";\r\nimport { allProductsSelector } from \"../../../state\";\r\n\r\nconst StyledListPage = styled.div`\r\n  button.addProduct {\r\n    margin-bottom: 25px;\r\n  }\r\n`;\r\n\r\nexport default function ListPage() {\r\n  const products = useSelector(allProductsSelector);\r\n  const [number, setNumber] = useState(1);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <StyledListPage>\r\n      <h1>Products List</h1>\r\n      <div className=\"productsBlock\">\r\n        <ProductsList arr={products} />\r\n        <button\r\n          className={\"addProduct\"}\r\n          onClick={() =>\r\n            fetch(`https://fakestoreapi.com/products/${number}`)\r\n              .then((res) => res.json())\r\n              .then((json) => {\r\n                setNumber((prev) => prev + 1);\r\n                dispatch(\r\n                  addProductAction({\r\n                    id: json.id,\r\n                    isSelected: false,\r\n                    imageUrl: json.image,\r\n                    name: json.title,\r\n                    count: 2 + number,\r\n                    size: {\r\n                      width: 3 + number,\r\n                      height: 3 + number,\r\n                    },\r\n                    weight: \"300g\",\r\n                  }),\r\n                );\r\n              })\r\n          }\r\n        >\r\n          New Product\r\n        </button>\r\n      </div>\r\n    </StyledListPage>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectedProductSelector } from \"../../../state\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { setSelectedProduct } from \"../../../state\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledDetailsPage = styled.div`\r\n  img {\r\n    width: 380px;\r\n  }\r\n  .productName {\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nexport default function DetailsPage() {\r\n  const browserHistory = useHistory();\r\n  const backListener = browserHistory.listen((loc) => {\r\n    if (browserHistory.action === \"POP\") {\r\n      dispatch(\r\n        setSelectedProduct({\r\n          id: selectedProduct?.id ? selectedProduct.id : 0,\r\n          changes: false,\r\n        }),\r\n      );\r\n    }\r\n  });\r\n  useEffect(() => {\r\n    return backListener();\r\n  });\r\n  const dispatch = useDispatch();\r\n  const selectedProduct = useSelector(selectedProductSelector);\r\n  return (\r\n    <StyledDetailsPage>\r\n      <Link\r\n        to=\"/\"\r\n        onClick={() =>\r\n          dispatch(\r\n            setSelectedProduct({\r\n              id: selectedProduct?.id ? selectedProduct.id : 0,\r\n              changes: false,\r\n            }),\r\n          )\r\n        }\r\n      >\r\n        Back\r\n      </Link>\r\n      <h1>Details Page</h1>\r\n      <span className={\"productName\"}>{selectedProduct?.name}</span>\r\n      <br />\r\n      <img src={selectedProduct?.imageUrl} alt=\"\" />\r\n      <br />\r\n      <p>{`\r\n        Count: ${selectedProduct?.count}\r\n        Sizes: Width: ${selectedProduct?.size.width} Height: ${selectedProduct?.size.height}\r\n        Weight: ${selectedProduct?.weight}`}</p>\r\n      <br />\r\n    </StyledDetailsPage>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport StyledAppContainer from \"./StyledAppContainer\";\nimport ListPage from \"./pages/ListPage/ListPage\";\nimport DetailsPage from \"./pages/DetailsPage/DetailsPage\";\n\nfunction App() {\n  return (\n    <Router>\n      <StyledAppContainer>\n        <Switch>\n          <Route exact path=\"/\" component={ListPage}></Route>\n          <Route path=\"/products/:productId\">\n            <DetailsPage />\n          </Route>\n        </Switch>\n      </StyledAppContainer>\n    </Router>\n  );\n}\n\nexport default App;\n","import { createSlice, createEntityAdapter } from \"@reduxjs/toolkit\";\r\nimport type { PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Comment } from \"./types\";\r\nimport type { CommentChanges } from \"./types\";\r\n\r\nexport const commentsAdapter = createEntityAdapter<Comment>({\r\n  selectId: (comment) => comment.id,\r\n});\r\n\r\nconst commentsSlice = createSlice({\r\n  name: \"comments\",\r\n  initialState: commentsAdapter.getInitialState(),\r\n  reducers: {\r\n    addCommentAction: (state, action: PayloadAction<Comment>) => {\r\n      commentsAdapter.addOne(state, action.payload);\r\n    },\r\n    deleteCommentAction: (state, action: PayloadAction<number>) => {\r\n      commentsAdapter.removeOne(state, action.payload);\r\n    },\r\n    editCommentAction: (state, action: PayloadAction<CommentChanges>) => {\r\n      commentsAdapter.updateOne(state, {\r\n        id: action.payload.id,\r\n        changes: {\r\n          description: action.payload.text,\r\n        },\r\n      });\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addCommentAction, deleteCommentAction } = commentsSlice.actions;\r\n\r\nexport default commentsSlice.reducer;\r\n","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport commentsReducer from \"./comments/slice\";\nimport productsReducer from \"./products/slice\";\n\nconst rootReducer = combineReducers({\n  comments: commentsReducer,\n  products: productsReducer,\n});\n\nexport const store = configureStore({\n  reducer: rootReducer,\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./view/App\";\nimport { store } from \"./state/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export * from \"./products/selectors\";\r\nexport * from \"./products/types\";\r\nexport * from \"./products/slice\";\r\n"],"sourceRoot":""}