{"version":3,"sources":["view/StyledApp.tsx","view/ProductsList/components/ProductItem.tsx","view/ProductsList/ProductsList.tsx","view/App.tsx","state/comments/slice.ts","state/products/slice.ts","state/store.ts","serviceWorker.ts","index.tsx"],"names":["StyledAppContainer","styled","div","ProductItem","imgUrl","productName","productDescription","productAmount","className","src","alt","ProductsList","App","StyledApp","CommentsSlice","createSlice","name","initialState","reducers","productsAdapter","createEntityAdapter","selectId","product","id","ProductsSlice","getInitialState","setProductsAction","state","action","setAll","payload","rootReducer","combineReducers","comments","commentsReducer","products","productsReducer","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4LAQeA,E,MANYC,EAAOC,IAAV,6F,OCOT,SAASC,EAAT,GAKJ,IAJTC,EAIQ,EAJRA,OACAC,EAGQ,EAHRA,YACAC,EAEQ,EAFRA,mBACAC,EACQ,EADRA,cAEA,OACE,oBAAIC,UAAU,cAAd,SACE,sBAAKA,UAAU,UAAf,UACE,qBAAKC,IAAKL,EAAQM,IAAI,YACtB,sBAAMF,UAAU,cAAhB,SAA+BH,IAC/B,mBAAGG,UAAU,qBAAb,SAAmCF,IACnC,sBAAME,UAAU,gBAAhB,SAAiCD,SClB1B,SAASI,IACtB,OACE,cAACR,EAAD,CACEC,OAAO,IACPC,YAAY,aACZC,mBAAmB,WACnBC,cAAe,KCINK,MATf,WACE,OACE,eAACC,EAAD,WACE,+CACA,cAACF,EAAD,Q,cCESG,EANOC,YAAY,CAChCC,KAAM,WACNC,aAJwB,GAKxBC,SAAU,KAGZ,QCNMC,EAAkBC,YAA6B,CACnDC,SAAU,SAACC,GAAD,OAAaA,EAAQC,MAalBC,EAVOT,YAAY,CAChCC,KAAM,UACNC,aAAcE,EAAgBM,kBAC9BP,SAAU,CACRQ,kBAAmB,SAACC,EAAOC,GACzBT,EAAgBU,OAAOF,EAAOC,EAAOE,aAK3C,QCdMC,EAAcC,YAAgB,CAClCC,SAAUC,EACVC,SAAUC,IAGCC,EAAQC,YAAe,CAClCC,QAASR,I,QCESS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUV,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJW,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f132ad4c.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst StyledAppContainer = styled.div`\r\n  width: 1024px;\r\n  margin: 0 auto;\r\n  border: 1px solid black;\r\n`;\r\n\r\nexport default StyledAppContainer;\r\n","import React from \"react\";\r\n\r\ninterface Props {\r\n  imgUrl: string;\r\n  productName: string;\r\n  productDescription: string;\r\n  productAmount: number;\r\n}\r\n\r\nexport default function ProductItem({\r\n  imgUrl,\r\n  productName,\r\n  productDescription,\r\n  productAmount,\r\n}: Props) {\r\n  return (\r\n    <li className=\"productItem\">\r\n      <div className=\"product\">\r\n        <img src={imgUrl} alt=\"product\" />\r\n        <span className=\"productName\">{productName}</span>\r\n        <p className=\"productDescription\">{productDescription}</p>\r\n        <span className=\"productAmount\">{productAmount}</span>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ProductItem from \"./components/ProductItem\";\r\n\r\nexport default function ProductsList() {\r\n  return (\r\n    <ProductItem\r\n      imgUrl=\"#\"\r\n      productName=\"my product\"\r\n      productDescription=\"asdfasdf\"\r\n      productAmount={44}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\nimport StyledAppContainer from \"./StyledApp\";\nimport ProductsList from \"./ProductsList/ProductsList\";\n\nfunction App() {\n  return (\n    <StyledAppContainer>\n      <h1>Products List</h1>\n      <ProductsList />\n    </StyledAppContainer>\n  );\n}\n\nexport default App;\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: any = [];\r\n\r\nconst CommentsSlice = createSlice({\r\n  name: \"comments\",\r\n  initialState,\r\n  reducers: {},\r\n});\r\n\r\nexport default CommentsSlice.reducer;\r\n","import { createSlice, createEntityAdapter } from \"@reduxjs/toolkit\";\r\nimport type { PayloadAction } from \"@reduxjs/toolkit\";\r\nimport type { Product } from \"./types\";\r\n\r\nconst productsAdapter = createEntityAdapter<Product>({\r\n  selectId: (product) => product.id,\r\n});\r\n\r\nconst ProductsSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState: productsAdapter.getInitialState(),\r\n  reducers: {\r\n    setProductsAction: (state, action: PayloadAction<Product[]>) => {\r\n      productsAdapter.setAll(state, action.payload);\r\n    },\r\n  },\r\n});\r\n\r\nexport default ProductsSlice.reducer;\r\n","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport commentsReducer from \"./comments/slice\";\nimport productsReducer from \"./products/slice\";\n\nconst rootReducer = combineReducers({\n  comments: commentsReducer,\n  products: productsReducer,\n});\n\nexport const store = configureStore({\n  reducer: rootReducer,\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./view/App\";\nimport { store } from \"./state/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}